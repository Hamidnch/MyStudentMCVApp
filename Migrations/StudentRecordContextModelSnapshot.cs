// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab4.DataAccess;

#nullable disable

namespace MyStudentMCVApp.Migrations
{
    [DbContext(typeof(StudentRecordContext))]
    partial class StudentRecordContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_Id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employee_Role", (string)null);
                });

            modelBuilder.Entity("lab4.DataAccess.AcademicRecord", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseCode")
                        .HasName("PK__Academic__3D052599CA81688F");

                    b.HasIndex("CourseCode");

                    b.ToTable("AcademicRecord", (string)null);
                });

            modelBuilder.Entity("lab4.DataAccess.Course", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("FeeBase")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("HoursPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("PK__Course__A25C5AA6502681CB");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("lab4.DataAccess.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("lab4.DataAccess.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Role1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("lab4.DataAccess.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Registration", b =>
                {
                    b.Property<string>("CourseCourseId")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("Course_CourseID");

                    b.Property<string>("StudentStudentNum")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("Student_StudentNum");

                    b.HasKey("CourseCourseId", "StudentStudentNum")
                        .HasName("PK__Registra__92ECCCE9B9BA1538");

                    b.HasIndex("StudentStudentNum");

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("EmployeeRole", b =>
                {
                    b.HasOne("lab4.DataAccess.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_ToEmployee");

                    b.HasOne("lab4.DataAccess.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ToRole");
                });

            modelBuilder.Entity("lab4.DataAccess.AcademicRecord", b =>
                {
                    b.HasOne("lab4.DataAccess.Course", "CourseCodeNavigation")
                        .WithMany("AcademicRecords")
                        .HasForeignKey("CourseCode")
                        .IsRequired()
                        .HasConstraintName("FK_AcademicRecord_Course");

                    b.HasOne("lab4.DataAccess.Student", "Student")
                        .WithMany("AcademicRecords")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_AcademicRecord_Student");

                    b.Navigation("CourseCodeNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Registration", b =>
                {
                    b.HasOne("lab4.DataAccess.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseCourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_ToCourse");

                    b.HasOne("lab4.DataAccess.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentStudentNum")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_ToStudent");
                });

            modelBuilder.Entity("lab4.DataAccess.Course", b =>
                {
                    b.Navigation("AcademicRecords");
                });

            modelBuilder.Entity("lab4.DataAccess.Student", b =>
                {
                    b.Navigation("AcademicRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
